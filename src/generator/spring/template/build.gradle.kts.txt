plugins {
    {%- if javaSelected -%}
    java
    {%- endif -%}
    id("org.springframework.boot") version "{{ metadata.springBootVersion }}"
    id("io.spring.dependency-management") version "1.1.6"
    {%- for plugin in plugins -%}
    {%- if plugin.id == "jacoco" -%}
    jacoco
    {%- else -%}
    id("{{ plugin.groupId }}") version "{{ plugin.version }}"
    {%- endif -%}
    {%- endfor -%}
    {%- if dependenciesIds contains "hilla" -%}
    id("dev.hilla") version "{{ hillaVersion }}"
    {%- endif -%}
    {%- if dependenciesIds contains "jte" -%}
    id("gg.jte.gradle") version "{{ jteVersion }}"
    {%- endif -%}
    {%- if dependenciesIds contains "vaadin" -%}
    id("com.vaadin") version "{{ vaadinVersion }}"
    {%- endif -%}
    {%- if dependenciesIds contains "data-jpa" and dependenciesIds contains "native" -%}
    id("org.hibernate.orm") version {{ ormVersion }}
    {%- endif -%}
    {%- if kotlinSelected -%}
    kotlin("jvm") version "{{ kotlinPlugin }}"
    kotlin("plugin.spring") version "{{ kotlinPlugin }}"
        {%- if dependenciesIds contains "data-jpa" -%}
    kotlin("plugin.jpa") version "{{ kotlinPlugin }}"
        {%- endif -%}
    {%- endif -%}
}

group = "{{ metadata.group }}"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of({{ jdkSourceCompatibility }})
    }
}
{%- if annotationDependencies.size != 0 -%}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}
{%- endif -%}

repositories {
    mavenCentral()
{%- if haveAIDependencies -%}
    maven { url = uri("https://repo.spring.io/milestone") }
{%- endif -%}
}
{%- if haveSpringCloudDependency or haveSpringShellDependency or haveTimeFoldSolverDependency or haveAIDependencies or dependenciesIds contains "spring-modulith" or dependenciesIds contains "netflix-dgs" or dependenciesIds contains "vaadin" -%}

{%- if haveSpringCloudDependency -%}
extra["springCloudVersion"] = "{{ springCloudVersion }}"
{%- endif -%}
{%- if haveSpringShellDependency -%}
extra["springShellVersion"] = "{{ springShellVersion }}"
{%- endif -%}
{%- if haveTimeFoldSolverDependency -%}
extra["timefoldSolverVersion"] = "{{ timefoldVersion }}"
{%- endif -%}
{%- if haveAIDependencies -%}
extra["springAiVersion"] = "{{ springAIVersion }}"
{%- endif -%}
{%- if dependenciesIds contains "hilla" -%}
extra["hillaVersion"] = "{{ hillaVersion }}"
{%- endif -%}
{%- if dependenciesIds contains "spring-modulith" -%}
extra["springModulithVersion"] = "{{ springModulithVersion }}"
{%- endif -%}
{%- if dependenciesIds contains "netflix-dgs" -%}
extra["netflixDgsVersion"] = "{{ netflixDgsVersion }}"
{%- endif -%}
{%- if dependenciesIds contains "vaadin" -%}
extra["vaadinVersion"] = "{{ vaadinVersion }}"
{%- endif -%}
{%- endif -%}

dependencies {
    {%- if includeActuatorExplicitly -%}
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    {%- endif -%}
    {%- for dependency in dependencies -%}
    implementation("{{ dependency.groupId }}:{{ dependency.artifactId }}{%- if dependency.version -%}:{{ dependency.version}}{%- endif -%}")
    {%- if dependency.id == "jte" -%}
    implementation("{{ dependency.groupId }}:jte-spring-boot-starter{%- if dependency.version -%}:{{ dependency.version}}{%- endif -%}")
        {%- if dependencies.size == 1 and includeActuatorExplicitly == false -%}
    implementation("org.springframework.boot:spring-boot-starter")
        {%- endif -%}
    {%- endif -%}
    {%- if dependency.id == "flyway" -%}
        {%- if dependenciesIds contains "mysql" -%}
    implementation("org.flywaydb:flyway-mysql")
        {%- endif -%}
        {%- if dependenciesIds contains "sqlserver" -%}
    implementation("org.flywaydb:flyway-sqlserver")
        {%- endif -%}
    {%- endif -%}
    {%- if dependency.id == "security" and dependenciesIds contains "thymeleaf" -%}
    implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity6")
    {%- endif -%}
    {%- else -%}
    {%- if includeActuatorExplicitly == false -%}
    implementation("org.springframework.boot:spring-boot-starter")
    {%- endif -%}
    {%- endfor -%}
    {%- if kotlinSelected -%}
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    {%- endif -%}
    {%- if kotlinSelected -%}
        {%- if dependenciesIds contains "web" or dependenciesIds contains "webflux" -%}
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
        {%- endif -%}
        {%- if dependenciesIds contains "webflux" or dependenciesIds contains "data-r2dbc" or dependenciesIds contains "data-redis-reactive" or dependenciesIds contains "rsocket" -%}
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
        {%- endif -%}
    {%- endif -%}
    {%- unless dependenciesIds contains "distributed-tracing" -%}
    {%- if dependenciesIds contains "zipkin" -%}
    implementation("io.micrometer:micrometer-tracing-bridge-brave")
    {%- endif -%}
    {%- endunless -%}
    {%- for runtimeDependency in runtimeDependencies -%}
    runtimeOnly("{{ runtimeDependency.groupId }}:{{ runtimeDependency.artifactId }}{%- if runtimeDependency.version -%}:{{ runtimeDependency.version}}{%- endif -%}")
    {%- if dependenciesIds contains "data-r2dbc" -%}
        {%- if runtimeDependency.id == "h2" -%}
    runtimeOnly("io.r2dbc:r2dbc-h2")
        {%- elsif runtimeDependency.id == "mariadb" -%}
    runtimeOnly("org.mariadb:r2dbc-mariadb:1.1.3")
        {%- elsif runtimeDependency.id == "sqlserver" -%}
    runtimeOnly("io.r2dbc:r2dbc-mssql:1.0.0.RELEASE")
        {%- elsif runtimeDependency.id == "postgresql" -%}
    runtimeOnly("org.postgresql:r2dbc-postgresql")
        {%- elsif runtimeDependency.id == "mysql" -%}
    runtimeOnly("io.asyncer:r2dbc-mysql")
        {%- endif -%}
    {%- endif -%}
    {%- endfor -%}
    {%- if dependenciesIds contains "wavefront" and dependenciesIds contains "zipkin" or dependenciesIds contains "distributed-tracing" -%}
    runtimeOnly("io.micrometer:micrometer-registry-wavefront")
    {%- endif -%}
    {%- for developmentDependency in developmentDependencies -%}
    developmentOnly("{{ developmentDependency.groupId }}:{{ developmentDependency.artifactId }}{%- if developmentDependency.version -%}:{{ developmentDependency.version}}{%- endif -%}")
    {%- endfor -%}
    {%- for annotationDependency in annotationDependencies -%}
    annotationProcessor("{{ annotationDependency.groupId }}:{{ annotationDependency.artifactId }}{%- if annotationDependency.version -%}:{{ annotationDependency.version}}{%- endif -%}")
    {%- endfor -%}
    {%- if haveLombok -%}
    compileOnly("org.projectlombok:lombok")
    {%- endif -%}
    {%- for compileDependency in compileDependencies -%}
    compile("{{ compileDependency.groupId }}:{{ compileDependency.artifactId }}{%- if compileDependency.version -%}:{{ compileDependency.version}}{%- endif -%}")
    {%- endfor -%}
    {%- for testDependency in testDependencies -%}
    testImplementation("{{ testDependency.groupId }}:{{ testDependency.artifactId }}{%- if testDependency.version -%}:{{ testDependency.version}}{%- endif -%}")
    {%- endfor -%}
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    {%- if kotlinSelected -%}
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    {%- endif -%}
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}
{%- if haveAIDependencies or haveSpringShellDependency or haveSpringCloudDependency or haveTimeFoldSolverDependency or dependenciesIds contains "spring-modulith" or dependenciesIds contains "netflix-dgs" or dependenciesIds contains "vaadin" -%}

dependencyManagement {
    imports {
        {%- if haveSpringShellDependency -%}
        mavenBom("org.springframework.shell:spring-shell-dependencies:${property("springShellVersion")}")
        {%- endif -%}
        {%- if haveSpringCloudDependency -%}
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
        {%- endif -%}
        {%- if haveTimeFoldSolverDependency -%}
        mavenBom("ai.timefold.solver:timefold-solver-bom:${property("timefoldSolverVersion")}")
        {%- endif -%}
        {%- if haveAIDependencies -%}
        mavenBom("org.springframework.ai:spring-ai-bom:${property("springAiVersion")}")
        {%- endif -%}
        {%- if dependenciesIds contains "hilla" -%}
        mavenBom("dev.hilla:hilla-bom:${property("hillaVersion")}")
        {%- endif -%}
        {%- if dependenciesIds contains "netflix-dgs" -%}
        mavenBom("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${property("netflixDgsVersion")}")
        {%- endif -%}
        {%- if dependenciesIds contains "vaadin" -%}
        mavenBom("com.vaadin:vaadin-bom:${property("vaadinVersion")}")
        {%- endif -%}
        {%- if dependenciesIds contains "spring-modulith" -%}
        mavenBom("org.springframework.modulith:spring-modulith-bom:${property("springModulithVersion")}")
        {%- endif -%}
    }
}
{%- endif -%}

{%- if kotlinSelected -%}
kotlin {
    compilerOptions {
        freeCompilerArgs.addAll("-Xjsr305=strict")
    }
}

{%- endif -%}
tasks.named('test') {
    useJUnitPlatform()
}
{%- if dependenciesIds contains "data-jpa" and dependenciesIds contains "native" -%}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}
{%- endif -%}
{%- if dependenciesIds contains "jte" -%}

jte {
    generate()
    binaryStaticContent = true
}
{%- endif -%}
{%- if dependenciesIds contains "spotless" -%}

spotless {
    format("misc") {
        target("*.gradle", "*.md", ".gitignore")
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    kotlinGradle {
        target("*.gradle.kts") // default target for kotlinGradle
        ktlint("1.1.1").editorConfigOverride(mapOf("indent_size" to 4, "max_line_length" to 120))
        toggleOffOn("formatter:off", "formatter:on")
        indentWithSpaces(4)
        endWithNewline()
        trimTrailingWhitespace()
    }
    {%- if javaSelected -%}
    java {
        target("src/*/java/**/*.java")
        palantirJavaFormat("2.40.0").style("PALANTIR") // Optional: choices are GOOGLE, AOSP, PALANTIR. default is GOOGLE
        removeUnusedImports()
        toggleOffOn("formatter:off", "formatter:on")
    }
    {%- else -%}
    kotlin {
        ktlint("1.1.1").editorConfigOverride(mapOf("indent_size" to 4, "max_line_length" to 120))
        toggleOffOn("formatter:off", "formatter:on")
        target("src/*/kotlin/**/*.kt")
        indentWithSpaces(4)
        endWithNewline()
        trimTrailingWhitespace()
    }
    {%- endif -%}
}
{%- endif-%}
{%- if dependenciesIds contains "graphql-code-generation" -%}

tasks.generateJava {
    schemaPaths.add("${projectDir}/src/main/resources/graphql-client")
    packageName = "{{ metadata.packageName }}"
    generateClient = true
}
{%- endif-%}
{%- if dependenciesIds contains "jacoco" -%}

jacoco { toolVersion = "{%- for plugin in plugins -%}{%- if plugin.id == "jacoco" -%}{{ plugin.version }}{%- endif -%}{%- endfor -%}" }

tasks.jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
    }
}
{%- endif-%}
