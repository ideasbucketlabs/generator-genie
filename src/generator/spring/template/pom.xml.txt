<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>{{ metadata.group }}</groupId>
	<artifactId>{{ metadata.artifact }}</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>{{ metadata.name }}</name>
	<description>{{ metadata.description | strip | strip_html | truncate: 512 }}</description>
	<properties>
		<java.version>{{ jdkSourceCompatibility }}</java.version>
		{%- if kotlinSelected -%}
		<kotlin.version>{{ kotlinPlugin }}</kotlin.version>
		{%- endif -%}
		{%- if haveSpringCloudDependency -%}
        <spring-cloud.version>{{ springCloudVersion }}</spring-cloud.version>
        {%- endif -%}
        {%- if haveSpringShellDependency -%}
        <spring-shell.version>{{ springShellVersion }}</spring-shell.version>
        {%- endif -%}
        {%- if haveTimeFoldSolverDependency -%}
        <timefold-solver.version>1.6.0</timefold-solver.version>
        {%- endif -%}
	</properties>
	<dependencies>
	    {%- if includeActuatorExplicitly -%}
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        {%- endif -%}
        {%- if kotlinSelected -%}
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>
            {%- if dependenciesIds contains "web" or dependenciesIds contains "webflux" -%}
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
        </dependency>
            {%- endif -%}
            {%- if dependenciesIds contains "webflux" or dependenciesIds contains "data-r2dbc" or dependenciesIds contains "data-redis-reactive" or dependenciesIds contains "rsocket" -%}
        <dependency>
            <groupId>io.projectreactor.kotlin</groupId>
            <artifactId>reactor-kotlin-extensions</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-reactor</artifactId>
        </dependency>
        {%- endif -%}
        {%- endif -%}
        {%- for dependency in dependencies -%}
        <dependency>
            <groupId>{{ dependency.groupId }}</groupId>
            <artifactId>{{ dependency.artifactId }}</artifactId>
        </dependency>
        {%- if dependency.id == "security" and dependenciesIds contains "thymeleaf" -%}
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
        </dependency>
        {%- endif -%}
        {%- else -%}
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		{%- if includeActuatorExplicitly == false -%}
        <dependency>
            <groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter</artifactId>
        </dependency>
        {%- endif -%}
        {%- endfor -%}
        {%- if dependenciesIds.size == 1 and dependenciesIds contains "timefold-solver" -%}
        <dependency>
            <groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter</artifactId>
        </dependency>
        {%- endif -%}
        {%- for developmentDependency in developmentDependencies -%}
        <dependency>
            <groupId>{{ developmentDependency.groupId }}</groupId>
            <artifactId>{{ developmentDependency.artifactId }}</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        {%- endfor -%}
        {%- for annotationDependency in annotationDependencies -%}
        <dependency>
            <groupId>{{ annotationDependency.groupId }}</groupId>
            <artifactId>{{ annotationDependency.artifactId }}</artifactId>
            <optional>true</optional>
        </dependency>
        {%- endfor -%}
        {%- unless dependenciesIds contains "distributed-tracing" -%}
            {%- if dependenciesIds contains "zipkin" -%}
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-brave</artifactId>
        </dependency>
            {%- endif -%}
        {%- endunless -%}
        {%- for runtimeDependency in runtimeDependencies -%}
        <dependency>
            <groupId>{{ runtimeDependency.groupId }}</groupId>
            <artifactId>{{ runtimeDependency.artifactId }}</artifactId>
            <scope>runtime</scope>
        </dependency>
            {%- if runtimeDependency.id == 'wavefront' -%}
                {%- if dependenciesIds contains "zipkin" -%}
            runtimeOnly("io.micrometer:micrometer-registry-wavefront")
                {%- endif -%}
                {%- if dependenciesIds contains "distributed-tracing" -%}
            runtimeOnly("io.micrometer:micrometer-registry-wavefront")
                {%- endif -%}
            {%- endif -%}
            {%- if dependenciesIds contains "data-r2dbc" -%}
                {%- if runtimeDependency.id == "h2" -%}
            <dependency>
                <groupId>io.r2dbc</groupId>
                <artifactId>r2dbc-h2</artifactId>
                <scope>runtime</scope>
            </dependency>
                {%- elsif runtimeDependency.id == "mariadb" -%}
        <dependency>
            <groupId>org.mariadb</groupId>
            <artifactId>r2dbc-mariadb</artifactId>
            <version>1.1.3</version>
            <scope>runtime</scope>
        </dependency>
                {%- elsif runtimeDependency.id == "sqlserver" -%}
        <dependency>
            <groupId>io.r2dbc</groupId>
            <artifactId>r2dbc-mssql</artifactId>
            <version>1.0.0.RELEASE</version>
            <scope>runtime</scope>
        </dependency>
                {%- elsif runtimeDependency.id == "postgresql" -%}
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>r2dbc-postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
                {%- elsif runtimeDependency.id == "mysql" -%}
        <dependency>
            <groupId>io.asyncer</groupId>
            <artifactId>r2dbc-mysql</artifactId>
            <scope>runtime</scope>
        </dependency>
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
        {%- for compileDependency in compileDependencies -%}
        <dependency>
        	<groupId>{{ compileDependency.groupId }}</groupId>
        	<artifactId>{{ compileDependency.artifactId }}</artifactId>
        	{%- if compileDependency.version -%}
        	<version>{{ compileDependency.version }}</version>
        	{%- endif -%}
        </dependency>
        {%- endfor -%}
        {%- for testDependency in testDependencies -%}
        <dependency>
            <groupId>{{ testDependency.groupId }}</groupId>
            <artifactId>{{ testDependency.artifactId }}</artifactId>
            {%- if testDependency.version -%}
            <version>{{ testDependency.version }}</version>
            {%- endif -%}
            <scope>test</scope>
        </dependency>
        {%- endfor -%}
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
    {%- if haveSpringShellDependency or haveSpringCloudDependency or haveTimeFoldSolverDependency -%}

    <dependencyManagement>
        <dependencies>
            {%- if haveTimeFoldSolverDependency -%}
            <dependency>
                <groupId>ai.timefold.solver</groupId>
                <artifactId>timefold-solver-bom</artifactId>
                <version>${timefold-solver.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            {%- endif -%}
            {%- if haveSpringShellDependency -%}
            <dependency>
                <groupId>org.springframework.shell</groupId>
                <artifactId>spring-shell-dependencies</artifactId>
                <version>${spring-shell.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            {%- endif -%}
            {%- if haveSpringCloudDependency -%}
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            {%- endif -%}
        </dependencies>
    </dependencyManagement>

    {%- endif -%}
	<build>
		{%- if kotlinSelected -%}
		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
        {%- endif -%}
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				{%- if haveLombok and explicitDockerImageForGradleIsRequired -%}
				<configuration>
                    <image>
                        <builder>paketobuildpacks/builder-jammy-base:latest</builder>
                    </image>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
				{%- elsif haveLombok == false and explicitDockerImageForGradleIsRequired -%}
                <configuration>
                    <image>
                        <builder>paketobuildpacks/builder-jammy-base:latest</builder>
                    </image>
                </configuration>
                {%- elsif haveLombok and explicitDockerImageForGradleIsRequired == false -%}
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
                {%- endif -%}
			</plugin>
			{%- if kotlinSelected -%}
			<plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <configuration>
                    <args>
                        <arg>-Xjsr305=strict</arg>
                    </args>
                    <compilerPlugins>
                        <plugin>spring</plugin>
                        {%- if dependenciesIds contains "data-jpa" -%}
                        <plugin>jpa</plugin>
                        {%- endif -%}
                    </compilerPlugins>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                    {%- if dependenciesIds contains "data-jpa" -%}
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-noarg</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                    {%- endif -%}
                </dependencies>
            </plugin>
			{%- endif -%}
			{%- for plugin in plugins -%}
            {%- if plugin.id == "jacoco" -%}
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>{{ plugin.version }}</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>CLASS</element>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-code-coverage-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            {%- elsif plugin.id == "native" -%}
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
            </plugin>
                {%- if dependenciesIds contains "data-jpa" -%}
            <plugin>
                <groupId>org.hibernate.orm.tooling</groupId>
                <artifactId>hibernate-enhance-maven-plugin</artifactId>
                <version>${hibernate.version}</version>
                <executions>
                    <execution>
                        <id>enhance</id>
                        <goals>
                            <goal>enhance</goal>
                        </goals>
                        <configuration>
                            <enableLazyInitialization>true</enableLazyInitialization>
                            <enableDirtyTracking>true</enableDirtyTracking>
                            <enableAssociationManagement>true</enableAssociationManagement>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
                {%- endif -%}
            {%- elsif plugin.id == "graphql-code-generation" -%}
            <plugin>
                <groupId>io.github.deweyjose</groupId>
                <artifactId>graphqlcodegen-maven-plugin</artifactId>
                <version>1.50</version>
                <executions>
                    <execution>
                        <id>dgs-codegen</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <schemaPaths>
                                <param>src/main/resources/graphql-client</param>
                            </schemaPaths>
                            <packageName>{{ metadata.group }}.{{ metadata.artifact }}.codegen</packageName>
                            <addGeneratedAnnotation>true</addGeneratedAnnotation>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-dgs-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            {%- elsif plugin.id == "spotless" -%}
            <!-- Spotless -->
            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <version>2.42.0</version>
                <configuration>
                    <!-- optional: limit format enforcement to just the files changed by this feature branch -->
                    <ratchetFrom>origin/main</ratchetFrom>
                    <formats>
                        <!-- you can define as many formats as you want, each is independent -->
                        <format>
                            <!-- define the files to apply to -->
                            <includes>
                                <include>.gitattributes</include>
                                <include>.gitignore</include>
                            </includes>
                            <!-- define the steps to apply to those files -->
                            <trimTrailingWhitespace/>
                            <endWithNewline/>
                            <indent>
                                <tabs>false</tabs>
                                <spacesPerTab>4</spacesPerTab>
                            </indent>
                        </format>
                    </formats>
                    <!-- define a language-specific format -->
                    {%- if javaSelected -%}
                    <java>
                        <palantirJavaFormat>
                            <version>2.39.0</version> <!-- optional -->
                            <style>AOSP</style> <!-- or AOSP/GOOGLE (optional) -->
                        </palantirJavaFormat>
                        <removeUnusedImports />
                        <indentWithSpace />
                    </java>
                    {%- else -%}
                    <kotlin>
                        <ktlint />
                    </kotlin>
                    {%- endif -%}
                </configuration>
            </plugin>
            {%- elsif plugin.id == "sonarqubescanner" -%}
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
            	<artifactId>sonar-maven-plugin</artifactId>
            	<version>3.10.0.2594</version>
            </plugin>
            {%- endif -%}
            {%- endfor -%}
		</plugins>
	</build>
</project>
