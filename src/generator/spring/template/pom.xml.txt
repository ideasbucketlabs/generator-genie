<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>{{ metadata.springBootVersion }}</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>{{ metadata.group }}</groupId>
  <artifactId>{{ metadata.artifact }}</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>{{ metadata.name }}</name>
  <description>{{ metadata.description | strip | strip_html | truncate: 512 }}</description>
  <properties>
    <java.version>{{ jdkSourceCompatibility }}</java.version>
    {%- if kotlinSelected -%}
    <kotlin.version>{{ kotlinPlugin }}</kotlin.version>
    {%- endif -%}
    {%- if haveSpringCloudDependency -%}
    <spring-cloud.version>{{ springCloudVersion }}</spring-cloud.version>
    {%- endif -%}
    {%- if haveSpringShellDependency -%}
    <spring-shell.version>{{ springShellVersion }}</spring-shell.version>
    {%- endif -%}
    {%- if haveTimeFoldSolverDependency -%}
    <spring-ai.version>{{ springAIVersion }}</spring-ai.version>
    {%- endif -%}
    {%- if haveTimeFoldSolverDependency -%}
    <timefold-solver.version>{{ timefoldVersion }}</timefold-solver.version>
    {%- endif -%}
    {%- if dependenciesIds contains "hilla" -%}
    <hilla.version>2.5.5</hilla.version>
    {%- endif -%}
    {%- if dependenciesIds contains "netflix-dgs" -%}
    <netflix-dgs.version>8.6.1</netflix-dgs.version>
    {%- endif -%}
    {%- if dependenciesIds contains "vaadin" -%}
    <vaadin.version>24.3.12</vaadin.version>
    {%- endif -%}
  </properties>
  <dependencies>
    {%- if includeActuatorExplicitly -%}
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    {%- endif -%}
    {%- if kotlinSelected -%}
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
    </dependency>
      {%- if dependenciesIds contains "web" or dependenciesIds contains "webflux" -%}
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-kotlin</artifactId>
    </dependency>
      {%- endif -%}
      {%- if dependenciesIds contains "webflux" or dependenciesIds contains "data-r2dbc" or dependenciesIds contains "data-redis-reactive" or dependenciesIds contains "rsocket" -%}
    <dependency>
      <groupId>io.projectreactor.kotlin</groupId>
      <artifactId>reactor-kotlin-extensions</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-coroutines-reactor</artifactId>
    </dependency>
    {%- endif -%}
    {%- endif -%}
    {%- for dependency in dependencies -%}
    <dependency>
      <groupId>{{ dependency.groupId }}</groupId>
      <artifactId>{{ dependency.artifactId }}</artifactId>
      {%- if dependency.version -%}
      <version>{{ dependency.version }}</version>
      {%- endif -%}
    </dependency>
    {%- if dependency.id == "security" and dependenciesIds contains "thymeleaf" -%}
    <dependency>
      <groupId>org.thymeleaf.extras</groupId>
      <artifactId>thymeleaf-extras-springsecurity6</artifactId>
    </dependency>
    {%- endif -%}
    {%- else -%}
    {%- if includeActuatorExplicitly == false -%}
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    {%- endif -%}
    {%- endfor -%}
    {%- for developmentDependency in developmentDependencies -%}
    <dependency>
      <groupId>{{ developmentDependency.groupId }}</groupId>
      <artifactId>{{ developmentDependency.artifactId }}</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>
    {%- endfor -%}
    {%- for annotationDependency in annotationDependencies -%}
    <dependency>
      <groupId>{{ annotationDependency.groupId }}</groupId>
      <artifactId>{{ annotationDependency.artifactId }}</artifactId>
      <optional>true</optional>
    </dependency>
    {%- endfor -%}
    {%- unless dependenciesIds contains "distributed-tracing" -%}
      {%- if dependenciesIds contains "zipkin" -%}
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-tracing-bridge-brave</artifactId>
    </dependency>
      {%- endif -%}
    {%- endunless -%}
    {%- for runtimeDependency in runtimeDependencies -%}
    <dependency>
      <groupId>{{ runtimeDependency.groupId }}</groupId>
      <artifactId>{{ runtimeDependency.artifactId }}</artifactId>
      <scope>runtime</scope>
    </dependency>
    {%- if dependenciesIds contains "data-r2dbc" -%}
      {%- if runtimeDependency.id == "h2" -%}
    <dependency>
      <groupId>io.r2dbc</groupId>
      <artifactId>r2dbc-h2</artifactId>
      <scope>runtime</scope>
      </dependency>
      {%- elsif runtimeDependency.id == "mariadb" -%}
    <dependency>
      <groupId>org.mariadb</groupId>
      <artifactId>r2dbc-mariadb</artifactId>
      <version>1.1.3</version>
      <scope>runtime</scope>
    </dependency>
      {%- elsif runtimeDependency.id == "sqlserver" -%}
    <dependency>
      <groupId>io.r2dbc</groupId>
      <artifactId>r2dbc-mssql</artifactId>
      <version>1.0.0.RELEASE</version>
      <scope>runtime</scope>
    </dependency>
      {%- elsif runtimeDependency.id == "postgresql" -%}
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>r2dbc-postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
      {%- elsif runtimeDependency.id == "mysql" -%}
    <dependency>
      <groupId>io.asyncer</groupId>
      <artifactId>r2dbc-mysql</artifactId>
      <scope>runtime</scope>
    </dependency>
      {%- endif -%}
    {%- endif -%}
    {%- endfor -%}
    {%- if dependenciesIds contains "wavefront" and dependenciesIds contains "zipkin" or dependenciesIds contains "distributed-tracing" -%}
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-tracing-reporter-wavefront</artifactId>
      <scope>runtime</scope>
    </dependency>
    {%- endif -%}
    {%- for compileDependency in compileDependencies -%}
    <dependency>
      <groupId>{{ compileDependency.groupId }}</groupId>
      <artifactId>{{ compileDependency.artifactId }}</artifactId>
      {%- if compileDependency.version -%}
      <version>{{ compileDependency.version }}</version>
      {%- endif -%}
    </dependency>
    {%- endfor -%}
    {%- for testDependency in testDependencies -%}
    <dependency>
      <groupId>{{ testDependency.groupId }}</groupId>
      <artifactId>{{ testDependency.artifactId }}</artifactId>
      {%- if testDependency.version -%}
      <version>{{ testDependency.version }}</version>
      {%- endif -%}
      <scope>test</scope>
    </dependency>
    {%- endfor -%}
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  {%- if haveSpringShellDependency or haveSpringCloudDependency or haveTimeFoldSolverDependency or dependenciesIds contains "hilla" or dependenciesIds contains "netflix-dgs" or dependenciesIds contains "vaadin" -%}

  <dependencyManagement>
    <dependencies>
      {%- if haveTimeFoldSolverDependency -%}
      <dependency>
        <groupId>ai.timefold.solver</groupId>
        <artifactId>timefold-solver-bom</artifactId>
        <version>${timefold-solver.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if haveSpringShellDependency -%}
      <dependency>
        <groupId>org.springframework.shell</groupId>
        <artifactId>spring-shell-dependencies</artifactId>
        <version>${spring-shell.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if haveSpringCloudDependency -%}
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if haveAIDependencies -%}
      <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-bom</artifactId>
        <version>${spring-ai.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if dependenciesIds contains "vaadin" -%}
      <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-bom</artifactId>
        <version>${vaadin.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if dependenciesIds contains "hilla" -%}
      <dependency>
        <groupId>dev.hilla</groupId>
        <artifactId>hilla-bom</artifactId>
        <version>${hilla.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
      {%- if dependenciesIds contains "netflix-dgs" -%}
      <dependency>
        <groupId>com.netflix.graphql.dgs</groupId>
        <artifactId>graphql-dgs-platform-dependencies</artifactId>
        <version>${netflix-dgs.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      {%- endif -%}
    </dependencies>
  </dependencyManagement>

  {%- endif -%}
  <build>
    {%- if kotlinSelected -%}
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
    {%- endif -%}
    <plugins>
      {%- if dependenciesIds contains "hilla" -%}
      <plugin>
        <groupId>dev.hilla</groupId>
        <artifactId>hilla-maven-plugin</artifactId>
        <version>${hilla.version}</version>
        <executions>
          <execution>
            <id>frontend</id>
            <goals>
              <goal>prepare-frontend</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      {%- endif -%}
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        {%- if haveLombok and explicitDockerImageForGradleIsRequired -%}
        <configuration>
          <image>
            <builder>paketobuildpacks/builder-jammy-base:latest</builder>
          </image>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
        {%- elsif haveLombok == false and explicitDockerImageForGradleIsRequired -%}
        <configuration>
          <image>
            <builder>paketobuildpacks/builder-jammy-base:latest</builder>
          </image>
        </configuration>
        {%- elsif haveLombok and explicitDockerImageForGradleIsRequired == false -%}
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
        {%- endif -%}
      </plugin>
      {%- if kotlinSelected -%}
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <configuration>
          <args>
            <arg>-Xjsr305=strict</arg>
          </args>
          <compilerPlugins>
            <plugin>spring</plugin>
            {%- if dependenciesIds contains "data-jpa" -%}
            <plugin>jpa</plugin>
            {%- endif -%}
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
          {%- if dependenciesIds contains "data-jpa" -%}
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
          {%- endif -%}
        </dependencies>
      </plugin>
      {%- endif -%}
      {%- for plugin in plugins -%}
      {%- if plugin.id == "jacoco" -%}
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>{{ plugin.version }}</version>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>CLASS</element>
                </rule>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>generate-code-coverage-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      {%- elsif plugin.id == "native" -%}
      <plugin>
        <groupId>org.graalvm.buildtools</groupId>
        <artifactId>native-maven-plugin</artifactId>
      </plugin>
        {%- if dependenciesIds contains "data-jpa" -%}
      <plugin>
        <groupId>org.hibernate.orm.tooling</groupId>
        <artifactId>hibernate-enhance-maven-plugin</artifactId>
        <version>${hibernate.version}</version>
        <executions>
          <execution>
            <id>enhance</id>
            <goals>
              <goal>enhance</goal>
            </goals>
            <configuration>
              <enableLazyInitialization>true</enableLazyInitialization>
              <enableDirtyTracking>true</enableDirtyTracking>
              <enableAssociationManagement>true</enableAssociationManagement>
            </configuration>
          </execution>
        </executions>
      </plugin>
        {%- endif -%}
      {%- elsif plugin.id == "graphql-code-generation" -%}
      <plugin>
        <groupId>io.github.deweyjose</groupId>
        <artifactId>graphqlcodegen-maven-plugin</artifactId>
        <version>1.50</version>
        <executions>
          <execution>
            <id>dgs-codegen</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <schemaPaths>
                <param>src/main/resources/graphql-client</param>
              </schemaPaths>
              <packageName>{{ metadata.group }}.{{ metadata.artifact }}.codegen</packageName>
              <addGeneratedAnnotation>true</addGeneratedAnnotation>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-dgs-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      {%- elsif plugin.id == "spotless" -%}
      <!-- Spotless -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.43.0</version>
        <configuration>
          <formats>
            <!-- you can define as many formats as you want, each is independent -->
            <format>
              <!-- define the files to apply to -->
              <toggleOffOn>
                <off>formatter:off</off>
                <on>formatter:on</on>
              </toggleOffOn>
              <includes>
                <include>.gitattributes</include>
                <include>.gitignore</include>
              </includes>
              <!-- define the steps to apply to those files -->
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <tabs>false</tabs>
                <spaces>true</spaces>
                <spacesPerTab>4</spacesPerTab>
              </indent>
            </format>
          </formats>
          <!-- define a language-specific format -->
          {%- if javaSelected -%}
          <java>
            <toggleOffOn>
              <off>formatter:off</off>
              <on>formatter:on</on>
            </toggleOffOn>
            <palantirJavaFormat>
              <version>2.40.0</version> <!-- optional -->
              <style>PALANTIR</style> <!-- or AOSP/GOOGLE/PALANTIR (optional) - DEFAULT is GOOGLE -->
            </palantirJavaFormat>
            <removeUnusedImports />
            <endWithNewline/>
          </java>
          {%- else -%}
          <kotlin>
            <ktlint>
              <editorConfigOverride>
                <indent_size>4</indent_size>
                <max_line_length>120</max_line_length>
              </editorConfigOverride>
            </ktlint>
            <toggleOffOn>
              <off>formatter:off</off>
              <on>formatter:on</on>
            </toggleOffOn>
          </kotlin>
          {%- endif -%}
          <pom>
            <!-- These are the defaults, you can override if you want -->
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom></sortPom>
            </pom>
        </configuration>
      </plugin>
      {%- elsif plugin.id == "sonarqubescanner" -%}
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>3.10.0.2594</version>
      </plugin>
      {%- endif -%}
      {%- endfor -%}
    </plugins>
  </build>
  {%- if haveAIDependencies -%}
  <repositories>
    <repository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
  {%- endif -%}
  {%- if dependenciesIds contains "vaadin" or dependenciesIds contains "hilla" -%}

  <profiles>
    <profile>
      <id>production</id>
      <build>
        <plugins>
          {%- if dependenciesIds contains "hilla" -%}
          <plugin>
            <groupId>dev.hilla</groupId>
            <artifactId>hilla-maven-plugin</artifactId>
            <version>${hilla.version}</version>
            <executions>
              <execution>
                <id>frontend</id>
                <phase>compile</phase>
                <goals>
                  <goal>build-frontend</goal>
                </goals>
                <configuration>
                  <productionMode>true</productionMode>
                </configuration>
              </execution>
            </executions>
          </plugin>
          {%- endif -%}
          {%- if dependenciesIds contains "vaadin" -%}
          <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <version>${vaadin.version}</version>
            <executions>
              <execution>
                <id>frontend</id>
                <phase>compile</phase>
                <goals>
                  <goal>prepare-frontend</goal>
                  <goal>build-frontend</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          {%- endif -%}
        </plugins>
      </build>
    </profile>
  </profiles>
  {%- endif -%}
</project>
