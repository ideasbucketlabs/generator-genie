services:
    {%- if dependenciesIds contains "mail" -%}
    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '8025:8025'
            - '1025:1025'
    {%- endif -%}
    {%- if dependenciesIds contains "qdrant-vector-database-ai" -%}
    qdrant:
        image: 'qdrant/qdrant'
        ports:
            - '6333:6333'
    {%- endif -%}
    {%- if dependenciesIds contains "data-elasticsearch" -%}
    elasticsearch:
        image: 'docker.elastic.co/elasticsearch/elasticsearch:7.17.10'
        environment:
            - ELASTIC_PASSWORD=secret
            - discovery.type=single-node
            - xpack.security.enabled=false
        ports:
            - '9200'
            - '9300'
    {%- endif -%}
    {%- if dependenciesIds contains "mariadb" -%}
    mariadb:
        image: 'mariadb:latest'
        environment:
            - MARIADB_DATABASE=mydatabase
            - MARIADB_PASSWORD=secret
            - MARIADB_ROOT_PASSWORD=verysecret
            - MARIADB_USER=myuser
        ports:
            - '3306'
    {%- endif -%}
    {%- if dependenciesIds contains "mysql" -%}
    mysql:
        image: 'mysql:latest'
        environment:
            - MYSQL_DATABASE=mydatabase
            - MYSQL_PASSWORD=secret
            - MYSQL_ROOT_PASSWORD=verysecret
            - MYSQL_USER=myuser
        ports:
            - '3306'
    {%- endif -%}
    {%- if dependenciesIds contains "postgresql" -%}
    postgres:
        image: 'postgres:alpine'
        environment:
            - POSTGRES_DB=mydatabase
            - POSTGRES_PASSWORD=secret
            - POSTGRES_USER=myuser
        ports:
            - '5432'
    {%- endif -%}
    {%- if dependenciesIds contains "data-neo4j" or dependenciesIds contains "neo-4-j-vector-database-ai" -%}
    neo4j:
        image: 'neo4j:latest'
        environment:
            - 'NEO4J_AUTH=neo4j/notverysecret'
        ports:
            - '7687'
    {%- endif -%}
    {%- if dependenciesIds contains "data-redis" or dependenciesIds contains "redis-search-and-query-vector-database-ai" or dependenciesIds contains "data-redis-reactive" -%}
    redis:
        image: '{%- if dependenciesIds contains "redis-search-and-query-vector-database-ai" -%}redis/redis-stack:latest{%- else -%}redis:latest{%- endif -%}'
        {%- if dependenciesIds contains "redis-search-and-query-vector-database-ai" -%}
        labels:
            - "org.springframework.boot.service-connection=redis"
        {%- endif -%}
        ports:
            - '6379'
    {%- endif -%}
    {%- if dependenciesIds contains "zipkin" -%}
    zipkin:
        image: 'openzipkin/zipkin:latest'
        ports:
          - '9411'
    {%- endif -%}
    {%- if dependenciesIds contains "sqlserver" -%}
    sqlserver:
        image: 'mcr.microsoft.com/mssql/server:latest'
        environment:
            - ACCEPT_EULA=yes
            - MSSQL_PID=express
            - MSSQL_SA_PASSWORD=verYs3cret
        ports:
            - '1433'
    {%- endif -%}
    {%- if dependenciesIds contains "kafka" -%}
    kafka-broker:
        image: confluentinc/cp-kafka:7.5.0
        hostname: kafka-broker
        container_name: kafka-broker
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
            KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
            KAFKA_PROCESS_ROLES: 'broker,controller'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-broker:29093'
            KAFKA_LISTENERS: 'PLAINTEXT://kafka-broker:29092,CONTROLLER://kafka-broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
            KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
            # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
            # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
            CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

    kafka-schema-registry:
        image: confluentinc/cp-schema-registry:7.5.0
        hostname: kafka-schema-registry
        container_name: kafka-schema-registry
        depends_on:
            - kafka-broker
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

    tansen:
        image: ideasbucket/tansen:latest
        hostname: tansen
        container_name: tansen
        depends_on:
            - kafka-broker
            - kafka-schema-registry
        ports:
            - "9080:8080"
        environment:
            TANSEN.KAFKA-CLUSTERS.0.BOOTSTRAP_SERVERS: 'kafka-broker:29092'
            TANSEN.KAFKA-CLUSTERS.0.NAME: 'local'
            TANSEN.KAFKA-CLUSTERS.0.LABEL: 'Local'
            TANSEN.KAFKA-CLUSTERS.0.SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
    {%- endif -%}
    {%- if dependenciesIds contains "spring-pulsar" or dependenciesIds contains "spring-pulsar-reactive"-%}
    pulsar:
        image: 'apachepulsar/pulsar:latest'
        ports:
          - '6650'
          - '8080'
        command: 'bin/pulsar standalone'
    {%- endif -%}
